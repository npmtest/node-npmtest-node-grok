{"/home/travis/build/npmtest/node-npmtest-node-grok/test.js":"/* istanbul instrument in package npmtest_node_grok */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-grok/lib.npmtest_node_grok.js":"/* istanbul instrument in package npmtest_node_grok */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_grok = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_grok = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-grok/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-grok && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_grok */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_grok\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_grok.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_grok.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_grok.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_grok.__dirname + '/lib.npmtest_node_grok.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-grok/node_modules/node-grok/lib/index.js":"var fs = require('fs');\nvar async = require('async');\nvar OnigRegExp = require('oniguruma').OnigRegExp;\nvar Map = require('collections/fast-map');\n\nfunction GrokPattern(expression, id) {\n    var t = this;\n    t.id = id;\n    t.expression = expression;\n    t.fields = [ null ]; // add a dummy entry at the beginning to swallow the fully captured expression\n    t.resolved = null;\n    t.regex = null;\n\n    t.parse = function(str, next) {\n        if (!t.regexp) {\n            t.regexp = new OnigRegExp(t.resolved);\n        }\n\n        t.regexp.search(str, function(err, result) {\n            if(err || !result)\n                return next(err, result);\n\n            var r = {};\n\n            result.forEach(function(item, index) {\n                var field = t.fields[index];\n                if(field && item.match) {\n                    r[field] = item.match;\n                }\n            });\n\n            return next(err, r, result);\n        });\n    };\n\n    t.parseSync = function(str) {\n        if (!t.regexp) {\n            t.regexp = new OnigRegExp(t.resolved);\n        }\n\n        var result = t.regexp.searchSync(str);\n\n        if(!result)\n            return null;\n\n        var r = {};\n\n        result.forEach(function(item, index) {\n            var field = t.fields[index];\n            if(field && item.match) {\n                r[field] = item.match;\n            }\n        });\n\n        return r;\n    };\n}\n\nvar subPatternsRegex      = /%\\{[A-Z0-9_]+(?::[A-Za-z0-9_]+)?\\}/g; // %{subPattern} or %{subPattern:fieldName}\nvar nestedFieldNamesRegex = /(\\(\\?<([A-Za-z0-9_]+)>)|\\(\\?:|\\(\\?>|\\(\\?!|\\(\\?<!|\\(|\\\\\\(|\\\\\\)|\\)|\\[|\\\\\\[|\\\\\\]|\\]/g;\n\nfunction GrokCollection() {\n    var t = this;\n\n    var patterns = new Map();\n\n    function resolvePattern (pattern) {\n        pattern = resolveSubPatterns(pattern);\n        pattern = resolveFieldNames(pattern);\n        return pattern;\n    }\n\n    // detect references to other patterns\n    // TODO: support automatic type conversion (e.g., \"%{NUMBER:duration:float}\"; see: https://www.elastic.co/guide/en/logstash/current/plugins-filters-grok.html)\n    function resolveSubPatterns (pattern) {\n        if(!pattern) { return; }\n\n        var expression  = pattern.expression;\n        var subPatterns = expression.match(subPatternsRegex) || [];\n\n        subPatterns.forEach(function (matched) {\n            // matched is: %{subPatternName} or %{subPatternName:fieldName}\n            var subPatternName = matched.substr(2, matched.length - 3);\n\n            var elements   = subPatternName.split(':');\n            subPatternName = elements[0];\n            var fieldName  = elements[1];\n\n            var subPattern = patterns.get(subPatternName);\n            if (!subPattern) {\n                console.error('Error: pattern \"' + subPatternName + '\" not found!');\n                return;\n            }\n\n            if (!subPattern.resolved) {\n                resolvePattern(subPattern);\n            }\n\n            if (fieldName) {\n                expression = expression.replace(matched, '(?<' + fieldName + '>' + subPattern.resolved + ')');\n            } else {\n                expression = expression.replace(matched, subPattern.resolved);\n            }\n        });\n\n        pattern.resolved = expression;\n        return pattern;\n    }\n\n    // create mapping table for the fieldNames to capture\n    function resolveFieldNames (pattern) {\n        if(!pattern) { return; }\n\n        var nestLevel = 0;\n        var inRangeDef = 0;\n        var matched;\n        while ((matched = nestedFieldNamesRegex.exec(pattern.resolved)) !== null) {\n            switch(matched[0]) {\n                case '(':    { if(!inRangeDef) { ++nestLevel; pattern.fields.push(null); } break; }\n                case '\\\\(':  break; // can be ignored\n                case '\\\\)':  break; // can be ignored\n                case ')':    { if(!inRangeDef) { --nestLevel; } break; }\n                case '[':    { ++inRangeDef; break; }\n                case '\\\\[':  break; // can be ignored\n                case '\\\\]':  break; // can be ignored\n                case ']':    { --inRangeDef; break; }\n                case '(?:':  // fallthrough                              // group not captured\n                case '(?>':  // fallthrough                              // atomic group\n                case '(?!':  // fallthrough                              // negative look-ahead\n                case '(?<!': { if(!inRangeDef) { ++nestLevel; } break; } // negative look-behind\n                default:     { ++nestLevel; pattern.fields.push(matched[2]); break; }\n            }\n        }\n\n        return pattern;\n    }\n\n    var patternLineRegex = /^([A-Z0-9_]+)\\s+(.+)/;\n    var splitLineRegex = /\\r?\\n/;\n\n    function doLoad(file) {\n        var i = 0;\n\n        if (file) {\n            var lines = file.toString().split(splitLineRegex);\n            if (lines && lines.length) {\n                lines.forEach(function (line) {\n                    var elements = patternLineRegex.exec(line);\n                    if (elements && elements.length > 2) {\n                        var pattern = new GrokPattern(elements[2], elements[1]);\n                        patterns.set(pattern.id, pattern);\n                        i++;\n                    }\n                });\n            }\n        }\n\n        return i;\n    }\n\n    t.createPattern = function (expression, id) {\n        id = id || 'pattern-' + patterns.length;\n        if (patterns.has(id)) {\n            console.error('Error: pattern with id %s already exists', id);\n        } else {\n            var pattern = new GrokPattern(expression, id);\n            resolvePattern(pattern);\n            patterns.set(id, pattern);\n            return pattern;\n        }\n    };\n\n    t.getPattern = function (id) {\n        return patterns.get(id);\n    };\n\n    t.load = function (filePath, callback) {\n        fs.readFile(filePath, function(err, file) {\n            if(err)\n                return callback(err);\n\n            doLoad(file);\n            return callback();\n        });\n    };\n\n    t.loadSync = function(filePath) {\n        return doLoad(fs.readFileSync(filePath));\n    };\n\n    t.count = function () {\n        return patterns.length;\n    };\n}\n\nvar patternsDir = __dirname + '/patterns/';\n\nfunction doLoadDefaultSync(loadModules) {\n    var result = new GrokCollection();\n\n    var files = fs.readdirSync(patternsDir);\n    if (files && files.length) {\n        files.filter(function(file) {\n            return !loadModules || !loadModules.length || loadModules.indexOf(file) !== -1;\n        }).forEach(function (file) {\n            result.loadSync(patternsDir + file);\n        })\n    }\n\n    return result;\n}\n\nfunction doLoadDefault(loadModules, callback) {\n    return fs.readdir(patternsDir, function(err, files) {\n        if(err)\n            return callback(err);\n\n        var result = new GrokCollection();\n\n        return async.parallel(\n            files.filter(function(file) {\n                return !loadModules || !loadModules.length || loadModules.indexOf(file) !== -1;\n            }).map(function (file) {\n                return function(callback) {\n                    return result.load(patternsDir + file, callback);\n                };\n            }),\n            function(err) {\n                if(err)\n                    return callback(err);\n\n                return callback(null, result);\n            });\n    });\n}\n\nmodule.exports = {\n    loadDefault: function (loadModules, callback) {\n        if(arguments.length < 2) {\n            callback = loadModules;\n            loadModules = null;\n        }\n\n        doLoadDefault(loadModules, callback);\n    },\n\n    loadDefaultSync: doLoadDefaultSync,\n\n    GrokCollection: GrokCollection\n};"}